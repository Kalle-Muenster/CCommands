/*///////////////////////////////////////////////////////////*\
||                                                           ||
||     File:      colors.cc                                  ||
||     Author:    Autogenerated                              ||
||     Generated: 18.08.2022                                 ||
||                                                           ||
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
#ifndef _OnTheFly_
  #include ".colors.h"
#else
  #define WITH_STRGPOOL
  #define WITH_JUNKYARD
  #include <.commandLiner.h>

  int USAGE(colors)
  {
    Synopsis("<argument usage>");

    return CheckForError()
        || !hasOption('h');
  }
#endif

// regular includes here:
#include <stdlib.h>


const char Red[] = { "\[1;31;40m" };
const char Green[] = { "\[1;32;40m" };
const char Gelb[] = { "\[1;33;40m" };
const char Blue[] = { "\[1;34;40m" };
const char Pink[] = { "\[1;35;40m" };
const char Cyan[] = { "\[1;36;40m" };
const char White[] = { "\[1;37;40m" };
const char* back = "\[0m";




const char* colors_string( const char* text, const char* emac )
{
    DEBUGLOG("enter")
    //pool_set( "cmd.exe /c \"echo " );
    pool_set( emac );
    pool_set( text );
    pool_set( back );
    //pool_set( "\"" );
    return pool_merge( 3 );
}


const char* colors_select( const char* color )
{
    DEBUGLOG("enter")
    switch(*(uint*)color) {
        case FOURCC('R','e','d','\0'): return &Red[0];
        case FOURCC('G','r','e','e'): return &Green[0];
        case FOURCC('B','l','u','e'): return &Blue[0];
        case FOURCC('G','e','l','b'): return &Gelb[0];
        case FOURCC('C','y','a','n'): return &Cyan[0];
        case FOURCC('P','i','n','k'): return &Pink[0];
    }
}


#ifdef colors
int main(int argc,char**argv)
{
    if( !InitCommandLiner(argc,argv) ) {
        exit( USAGE(colors) );
    }

    if( !search('c') ) {
        setOption('c', "Green" );
    }

    if (!hasOption('t')) {
        setOption('t', rawName(1) );
    }

    DEBUGLOG("Here!")
    const char* coloredText = colors_string( getName('t'),
                              colors_select( getName('c') )
                              );

    // system( coloredText );

    printf( "%s" )
    fwrite( coloredText, 1, strlen(coloredText), 1 );
    printf("\n");

    exit( CheckForError() );
}

#endif
